================================================================================
Quick Install

- Decide where to install the files . The simplest approach is to use
  GNU standard locations and just set a "prefix" for the root install
  directory (reffered to as $PREFIX below). More control can be
  achieved by overriding other of the GNU standard install locations
  (includedir, bindir, etc). Configuring with just a prefix:

  > make config prefix=$PREFIX

- Compiling and installing:

  > make install(the makefile variable CXX has been assigned the compiler mpic++ for the compilation of Main.cc in simp directory).
  
================================================================================
Configuration

- Multiple configuration steps can be joined into one call to "make
  config" by appending multiple variable assignments on the same line.

- The configuration is stored in the file "config.mk". Look here if
  you want to know what the current configuration looks like.

- To reset from defaults simply remove the "config.mk" file or call
  "make distclean".

- Recompilation can be done without the configuration step.

  [ TODO: describe configartion possibilities for compile flags / modes ]

================================================================================
Building

  [ TODO: describe seperate build modes ]

================================================================================
Install

  [ TODO: ? ]

================================================================================
Directory Overview:

minisat/mtl/            Mini Template Library
minisat/utils/          Generic helper code (I/O, Parsing, CPU-time, etc)
minisat/core/           A core version of the solver
minisat/simp/           An extended solver with simplification capabilities
doc/                    Documentation
README
LICENSE
================================================================================
Modifications :

-After using MPI four solver objects are created , which independently parse the dimacs file
 and look for a satisfying solution after using some assumptions on two variables.
-Each process communicates its result with master process(Rank 3).If it sends 0 then it has found a 
 satisfying solution ,1 for unsatisfiable and 2 for indeterminate.
================================================================================
Examples:

As the following minisat has been parallized with 4 processes.
Run the upgraded code with the following command.
            mpirun -np 4 minisat <name of cnf file> <outputfile> (if any).
            Also the name of output file will be for the process with rank 0 for other process the minisat will implicitly 
            create out1.txt , out2.txt and out3.txt corressponding to each process so that every process can either write its 
            solution or otherwise.


